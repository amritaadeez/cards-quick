import { __decorate, __param } from "tslib";
import { Directive, ElementRef, HostListener, Optional, Self } from '@angular/core';
import { CreditCard } from '../credit-card';
import { NgControl } from '@angular/forms';
import { BehaviorSubject } from 'rxjs';
var CreditCardFormatDirective = /** @class */ (function () {
    function CreditCardFormatDirective(el, control) {
        this.el = el;
        this.control = control;
        this.cards = CreditCard.cards();
        this.resolvedScheme$ = new BehaviorSubject('unknown');
        this.target = this.el.nativeElement;
    }
    /**
     * Updates the value to target element, or FormControl if exists.
     * @param value New input value.
     */
    CreditCardFormatDirective.prototype.updateValue = function (value) {
        if (this.control) {
            this.control.control.setValue(value);
        }
        else {
            this.target.value = value;
        }
    };
    CreditCardFormatDirective.prototype.onKeypress = function (e) {
        if (CreditCard.restrictNumeric(e)) {
            if (CreditCard.isCardNumber(e.which, this.target)) {
                this.formatCardNumber(e);
            }
        }
        else {
            e.preventDefault();
        }
    };
    CreditCardFormatDirective.prototype.onKeydown = function (e) {
        this.formatBackCardNumber(e);
        this.reFormatCardNumber();
    };
    CreditCardFormatDirective.prototype.onKeyup = function () {
        this.setCardType();
    };
    CreditCardFormatDirective.prototype.onPaste = function () {
        this.reFormatCardNumber();
    };
    CreditCardFormatDirective.prototype.onChange = function () {
        this.reFormatCardNumber();
    };
    CreditCardFormatDirective.prototype.onInput = function () {
        this.reFormatCardNumber();
        this.setCardType();
    };
    CreditCardFormatDirective.prototype.formatCardNumber = function (e) {
        var digit = String.fromCharCode(e.which);
        if (!/^\d+$/.test(digit)) {
            return;
        }
        var value = this.target.value;
        var card = CreditCard.cardFromNumber(value + digit);
        var length = (value.replace(/\D/g, '') + digit).length;
        var upperLength = card ? card.length[card.length.length - 1] : 19;
        if (length >= upperLength) {
            return;
        }
    };
    CreditCardFormatDirective.prototype.formatBackCardNumber = function (e) {
        var value = this.target.value;
        var selStart = this.target.selectionStart;
        if (e.which !== 8) {
            return;
        }
        if (selStart != null
            && selStart === this.target.selectionEnd
            && selStart > 0
            && selStart !== value.length
            && value[selStart - 1] === ' ') {
            e.preventDefault();
            if (selStart <= 2) {
                this.updateValue(value.slice(selStart));
                this.target.selectionStart = 0;
                this.target.selectionEnd = 0;
            }
            else {
                this.updateValue(value.slice(0, selStart - 2) + value.slice(selStart));
                this.target.selectionStart = selStart - 2;
                this.target.selectionEnd = selStart - 2;
            }
        }
    };
    CreditCardFormatDirective.prototype.setCardType = function () {
        var _this = this;
        var cardType = CreditCard.cardType(this.target.value) || 'unknown';
        this.resolvedScheme$.next(cardType);
        if (!this.target.classList.contains(cardType)) {
            this.cards.forEach(function (card) {
                _this.target.classList.remove(card.type);
            });
            this.target.classList.remove('unknown');
            this.target.classList.add(cardType);
            this.target.classList.toggle('identified', cardType !== 'unknown');
        }
    };
    CreditCardFormatDirective.prototype.reFormatCardNumber = function () {
        var _this = this;
        var value = CreditCard.formatCardNumber(CreditCard.replaceFullWidthChars(this.target.value));
        var oldValue = this.target.value;
        if (value !== oldValue) {
            this.target.selectionStart = this.target.selectionEnd = CreditCard.safeVal(value, this.target, (function (safeVal) {
                _this.updateValue(safeVal);
            }));
        }
    };
    CreditCardFormatDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgControl, decorators: [{ type: Self }, { type: Optional }] }
    ]; };
    __decorate([
        HostListener('keypress', ['$event'])
    ], CreditCardFormatDirective.prototype, "onKeypress", null);
    __decorate([
        HostListener('keydown', ['$event'])
    ], CreditCardFormatDirective.prototype, "onKeydown", null);
    __decorate([
        HostListener('keyup')
    ], CreditCardFormatDirective.prototype, "onKeyup", null);
    __decorate([
        HostListener('paste')
    ], CreditCardFormatDirective.prototype, "onPaste", null);
    __decorate([
        HostListener('change')
    ], CreditCardFormatDirective.prototype, "onChange", null);
    __decorate([
        HostListener('input')
    ], CreditCardFormatDirective.prototype, "onInput", null);
    CreditCardFormatDirective = __decorate([
        Directive({
            selector: 'input[ccNumber]',
            exportAs: 'ccNumber',
        }),
        __param(1, Self()), __param(1, Optional())
    ], CreditCardFormatDirective);
    return CreditCardFormatDirective;
}());
export { CreditCardFormatDirective };
//# sourceMappingURL=data:application/json;base64,
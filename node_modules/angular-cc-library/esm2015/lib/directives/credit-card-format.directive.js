import { __decorate, __param } from "tslib";
import { Directive, ElementRef, HostListener, Optional, Self } from '@angular/core';
import { CreditCard } from '../credit-card';
import { NgControl } from '@angular/forms';
import { BehaviorSubject } from 'rxjs';
let CreditCardFormatDirective = class CreditCardFormatDirective {
    constructor(el, control) {
        this.el = el;
        this.control = control;
        this.cards = CreditCard.cards();
        this.resolvedScheme$ = new BehaviorSubject('unknown');
        this.target = this.el.nativeElement;
    }
    /**
     * Updates the value to target element, or FormControl if exists.
     * @param value New input value.
     */
    updateValue(value) {
        if (this.control) {
            this.control.control.setValue(value);
        }
        else {
            this.target.value = value;
        }
    }
    onKeypress(e) {
        if (CreditCard.restrictNumeric(e)) {
            if (CreditCard.isCardNumber(e.which, this.target)) {
                this.formatCardNumber(e);
            }
        }
        else {
            e.preventDefault();
        }
    }
    onKeydown(e) {
        this.formatBackCardNumber(e);
        this.reFormatCardNumber();
    }
    onKeyup() {
        this.setCardType();
    }
    onPaste() {
        this.reFormatCardNumber();
    }
    onChange() {
        this.reFormatCardNumber();
    }
    onInput() {
        this.reFormatCardNumber();
        this.setCardType();
    }
    formatCardNumber(e) {
        const digit = String.fromCharCode(e.which);
        if (!/^\d+$/.test(digit)) {
            return;
        }
        const value = this.target.value;
        const card = CreditCard.cardFromNumber(value + digit);
        const length = (value.replace(/\D/g, '') + digit).length;
        const upperLength = card ? card.length[card.length.length - 1] : 19;
        if (length >= upperLength) {
            return;
        }
    }
    formatBackCardNumber(e) {
        const value = this.target.value;
        const selStart = this.target.selectionStart;
        if (e.which !== 8) {
            return;
        }
        if (selStart != null
            && selStart === this.target.selectionEnd
            && selStart > 0
            && selStart !== value.length
            && value[selStart - 1] === ' ') {
            e.preventDefault();
            if (selStart <= 2) {
                this.updateValue(value.slice(selStart));
                this.target.selectionStart = 0;
                this.target.selectionEnd = 0;
            }
            else {
                this.updateValue(value.slice(0, selStart - 2) + value.slice(selStart));
                this.target.selectionStart = selStart - 2;
                this.target.selectionEnd = selStart - 2;
            }
        }
    }
    setCardType() {
        const cardType = CreditCard.cardType(this.target.value) || 'unknown';
        this.resolvedScheme$.next(cardType);
        if (!this.target.classList.contains(cardType)) {
            this.cards.forEach((card) => {
                this.target.classList.remove(card.type);
            });
            this.target.classList.remove('unknown');
            this.target.classList.add(cardType);
            this.target.classList.toggle('identified', cardType !== 'unknown');
        }
    }
    reFormatCardNumber() {
        const value = CreditCard.formatCardNumber(CreditCard.replaceFullWidthChars(this.target.value));
        const oldValue = this.target.value;
        if (value !== oldValue) {
            this.target.selectionStart = this.target.selectionEnd = CreditCard.safeVal(value, this.target, (safeVal => {
                this.updateValue(safeVal);
            }));
        }
    }
};
CreditCardFormatDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] }
];
__decorate([
    HostListener('keypress', ['$event'])
], CreditCardFormatDirective.prototype, "onKeypress", null);
__decorate([
    HostListener('keydown', ['$event'])
], CreditCardFormatDirective.prototype, "onKeydown", null);
__decorate([
    HostListener('keyup')
], CreditCardFormatDirective.prototype, "onKeyup", null);
__decorate([
    HostListener('paste')
], CreditCardFormatDirective.prototype, "onPaste", null);
__decorate([
    HostListener('change')
], CreditCardFormatDirective.prototype, "onChange", null);
__decorate([
    HostListener('input')
], CreditCardFormatDirective.prototype, "onInput", null);
CreditCardFormatDirective = __decorate([
    Directive({
        selector: 'input[ccNumber]',
        exportAs: 'ccNumber',
    }),
    __param(1, Self()), __param(1, Optional())
], CreditCardFormatDirective);
export { CreditCardFormatDirective };
//# sourceMappingURL=data:application/json;base64,